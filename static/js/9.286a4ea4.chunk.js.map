{"version":3,"sources":["components/footer/footer.js","components/prompt/prompt.js","components/login/login.js","actions/mortgage.js","components/mortgageOrder/mortgageData.js","components/mortgageUser/mortgageUser.js","components/mortgageOrder/mortgageOrder.js","containers/mortgage/mortgage.js"],"names":["translate","href","target","rel","src","alt","Prompt","props","className","type","message","defaultProps","Login","state","importWallet","bind","createWallet","observe","nextProps","nextState","equal","this","modalControl","open","t","_login","address","loginIO","actions","rpc","onClick","aria-hidden","React","Component","wait","changeMortgageRate","userAddress","dispatch","a","getMortgageRate","data","types","changeEquivalentAmount","getEquvialentAmount","changeUsableAmount","getAmount","changeLoanAmount","changeRemainingAmount","changeUsableXPA","getUsableXPA","mortgageLogout","changeMortgagePrice","getMortgagePrice","MortgageData","HighestMortgageRate","closingLine","renderAccount","user","highest","wallet","setTimeout","getUserData","setState","update","$set","replace","getData","loan","remaining","price","Object","keys","map","key","data-tip","data-for","formatNumber","tenFill","bnHex","toString","id","place","Number","mortgageRate","equivalentAmount","usableXPA","renderButton","MortgageUser","tokens","values","finalConfig","assetToken","unshift","XPA","ethAddress","logout","window","location","reload","account","tokenList","BN","Web3","utils","list","l","i","some","d","usable","find","decimal","token","MortgageOrder","select","mortgage","able","value","withdraw","toggle","repayment","estimateMortgage","doMortgage","estimateAct","doAct","openToggle","renderToggle","handleInput","clickOutside","autoInputAll","changeSelect","all","addEventListener","removeEventListener","mortgageActions","e","toggle1","document","querySelectorAll","toggle2","contains","stopPropagation","dataset","item","name","amount","Math","round","toastOpen","agent","observer","canUse","tk","lt","bnTen","fromToken","toToken","modalActions","updateLoading","updateMessage","cash","tx","checkETH","gas","eth","gasPrice","gasLimit","fee","exec","use","currentTarget","close","preventDefault","filter","basic","k","arr","push","data-item","data-key","style","focus","ref","input","onChange","data-type","Mortgage","connectFirebase","loading","keep","modal","to","renderUser","connect","from","book","bookActions","bindActionCreators","userActions"],"mappings":"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","file":"static/js/9.286a4ea4.chunk.js","sourcesContent":["import React from 'react';\n// import { Link } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\n\nimport './footer.scss';\n\nconst Footer = () =>\n{\n    // const { t } = props;\n    return (\n        <footer>\n            <p>Powered by</p>\n            <div>\n                <a href=\"https://www.tideisun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img src=\"/img/logo-lite.png\" alt=\"tideisun\" />\n                </a>\n            </div>\n            <p>\n                Copyright\n                <span>©</span>\n                TideiSun. All rights reserved.\n            </p>\n            {/* <p><Link to=\"privacy\">{t('footer.term')}</Link></p> */}\n            {/* <p><Link to=\"privacy\">{t('footer.privacy')}</Link></p> */}\n        </footer>\n    );\n};\n\n// Footer.defaultProps = {\n//     t: () => {}\n// };\n\n// Footer.propTypes = {\n//     t: PropTypes.func\n// };\n\nexport default translate()(Footer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './prompt.scss';\n\nconst Prompt = (props) =>\n{\n    return (\n        <div className=\"c_prompt\">\n            <img src={`/img/icon/ic-help${props.type === 1 ? '-gray' : ''}.svg`} alt=\"question mark\" />\n            <div>\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nPrompt.defaultProps = {\n    type: 1\n};\n\nPrompt.propTypes = {\n    type: PropTypes.number,\n    message: PropTypes.string.isRequired\n};\n\nexport default Prompt;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport equal from 'deep-equal';\n\nimport { loginIO } from '../../utils/login';\nimport Prompt from '../prompt/prompt';\nimport './login.scss';\nimport * as rpc from '../../utils/rpc';\n\nclass Login extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n\n        this.importWallet = this.importWallet.bind(this);\n        this.createWallet = this.createWallet.bind(this);\n        this.observe = this.observe.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps, nextState)\n    {\n        if (equal(nextProps, this.props) && equal(nextState, this.state))\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n    createWallet()\n    {\n        this.props.modalControl.open('create', { message: this.props.t('notDownloadWallet') });\n    }\n\n    importWallet()\n    {\n        this.props.modalControl.open('import');\n    }\n\n    observe()\n    {\n        // this.props.modalControl.open('observer');\n        const _login = (address) => {\n            loginIO({\n                address\n            }, '', 'metamask', '',  this.props.actions)\n        };\n\n        rpc.startExtension((address) => {\n            _login(address)\n        });\n        rpc.setExtensionAddress((address) => {\n            _login(address)\n        });\n\n    }\n\n    render()\n    {\n        const { t } = this.props;\n        return (\n            <div className=\"c_login\">\n                <ul>\n                    <li className=\"button\" onClick={this.importWallet}><span>{t('importWallet')}</span></li>\n                    <li className=\"button\" onClick={this.createWallet}><span>{t('createWallet')}</span></li>\n                    {/* <li className=\"unique\" onClick={this.observe}>\n                        <span>TideWallet Connect</span>\n                        <Prompt type={2} message={t('prompt.obsever')} />\n                        <i className=\"fa fa-angle-right\" aria-hidden=\"true\" />\n                    </li> */}\n                    <li className=\"unique\" onClick={this.observe}>\n                        <span>MetaMask</span>\n                        <Prompt type={2} message={t('prompt.obsever')} />\n                        <i className=\"fa fa-angle-right\" aria-hidden=\"true\" />\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nLogin.defaultProps = {\n    t: () => {},\n};\n\nLogin.propTypes = {\n    t: PropTypes.func,\n    modalControl: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n};\n\nexport default translate('account', { wait: true })(Login);\n\n","import * as types from '../constants/actionTypeMortgage';\nimport {\n    getMortgageRate,\n    getEquvialentAmount,\n    getAmount,\n    getUsableXPA,\n    getMortgagePrice\n    // getClosingLine\n} from '../utils/rpc';\n\nexport const changeMortgageRate = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getMortgageRate(userAddress);\n        dispatch({\n            type: types.CHANGE_MORTGAGE_RATE,\n            data\n        });\n    };\n};\n\nexport const changeEquivalentAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getEquvialentAmount(userAddress);\n        dispatch({\n            type: types.CHANGE_EQUIVALENT_AMOUNT,\n            data\n        });\n    };\n};\n\nexport const changeUsableAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'usable');\n        dispatch({\n            type: types.CHANGE_USABLE,\n            data\n        });\n    };\n};\n\nexport const changeLoanAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'loan');\n        dispatch({\n            type: types.CHANGE_LOAN,\n            data\n        });\n    };\n};\n\nexport const changeRemainingAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'remaining');\n        dispatch({\n            type: types.CHANGE_REMAINING,\n            data\n        });\n    };\n};\n\n// export const mappingAssets = () =>\n// {\n//     return async (dispatch) =>\n//     {\n//         const data = await getAssets();\n//         dispatch({\n//             type: types.MAPPING_ASSETS,\n//             data\n//         });\n//     };\n// };\n\nexport const changeUsableXPA = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getUsableXPA(userAddress);\n        dispatch({\n            type: types.CHANGE_USABLE_XPA,\n            data\n        });\n    };\n};\n\nexport const mortgageLogout = () =>\n{\n    return {\n        type: types.MORTGAGE_LOGOUT,\n    };\n};\n\nexport const changeMortgagePrice = () =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getMortgagePrice();\n        dispatch({\n            type: types.CHANGE_MORTGAGE_PRICE,\n            data\n        });\n    };\n};\n\n// export const changeClosingLine = () =>\n// {\n//     return async (dispatch) =>\n//     {\n//         const data = await getClosingLine();\n//         dispatch({\n//             type: types.CHANGE_CLOSING_LINE,\n//             data\n//         });\n//     };\n// };\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { translate } from 'react-i18next';\nimport ReactTooltip from 'react-tooltip';\nimport * as rpc from '../../utils/rpc';\nimport { formatNumber, tenFill, bnHex } from '../../utils/format';\nimport Prompt from '../prompt/prompt';\nimport './mortgageOrder.scss';\n\nclass MortgageData extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            HighestMortgageRate: '-',\n            closingLine: '-',\n        };\n\n        this.renderAccount = this.renderAccount.bind(this);\n    }\n\n    componentDidMount()\n    {\n        const { user } = this.props;\n\n        const getData = async () =>\n        {\n            const highest = await rpc.getHighestMortgageRate();\n            const closingLine = await rpc.getClosingLine();\n\n            if (user.wallet)\n            {\n                setTimeout(() =>\n                {\n                    this.props.getUserData(user.wallet.address);\n                }, 200);\n            }\n\n            this.setState(update(this.state, {\n                HighestMortgageRate: { $set: highest.replace('0x', '') },\n                closingLine: { $set: closingLine.replace('0x', '') },\n            }));\n        };\n\n\n        getData();\n    }\n\n    componentWillReceiveProps(nextProps)\n    {\n        if (nextProps.user.wallet && nextProps.user !== this.props.user)\n        {\n            setTimeout(() =>\n            {\n                this.props.getUserData(nextProps.user.wallet.address);\n            }, 200);\n        }\n    }\n\n    renderAccount()\n    {\n        const { loan, remaining, price } = this.props;\n\n        const template = Object.keys(price).map((key) =>\n        {\n            return (\n                <div key={key}>\n                    <div>{key}</div>\n                    <span data-tip data-for={`${key}price`}>{formatNumber(7, tenFill(bnHex(price[key]).toString(), -18))}</span>\n                    <ReactTooltip id={`${key}price`} place=\"right\">{tenFill(bnHex(price[key]).toString(), -18)}</ReactTooltip>\n                    <span data-tip data-for={`${key}loan`}>{formatNumber(7, tenFill(bnHex(loan[key]).toString(), -18))}</span>\n                    <ReactTooltip id={`${key}loan`} place=\"right\">{tenFill(bnHex(loan[key]).toString(), -18)}</ReactTooltip>\n                    <span data-tip data-for={`${key}remaining`}>{formatNumber(7, Number(tenFill(bnHex(remaining[key]).toString(), -18)))}</span>\n                    <ReactTooltip id={`${key}remaining`} place=\"right\">{tenFill(bnHex(remaining[key]).toString(), -18)}</ReactTooltip>\n                </div>\n            );\n        });\n\n        return template;\n    }\n\n    render()\n    {\n        const { HighestMortgageRate, closingLine } = this.state;\n        const { mortgageRate, equivalentAmount, usableXPA, t, renderButton } = this.props;\n        return (\n            <div className=\"order-info\">\n                <div className=\"mortgage-rate divid\">\n                    <div className=\"infor\">\n                        <div className=\"rate\">\n                            <span>\n                                {t('mortgage.mortgageRate')}\n                                <Prompt message={t('prompt.mortgageRate')} />\n                            </span>\n                            <span data-tip data-for={`mortgage_rate${mortgageRate}`}>\n                                {formatNumber(8, tenFill(bnHex(mortgageRate).toString(), -16)) || 0}%\n                            </span>\n                            <ReactTooltip id={`mortgage_rate${mortgageRate}`} place=\"right\">{tenFill(bnHex(mortgageRate).toString(), -16)}</ReactTooltip>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.highestRate')}</span>\n                            <span>\n                                {formatNumber(8, tenFill(bnHex(HighestMortgageRate).toString(), -16)) || 0}%\n                            </span>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.equival')}</span>\n                            <span data-tip data-for={`equival${equivalentAmount}`}>{formatNumber(8, tenFill(bnHex(equivalentAmount).toString(), -18))} XPA</span>\n                            <ReactTooltip id={`equival${equivalentAmount}`} place=\"right\">{tenFill(bnHex(equivalentAmount).toString(), -18)}</ReactTooltip>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.detachable')}</span>\n                            <span data-tip data-for={`usable${usableXPA}`}>\n                                {Number(tenFill(bnHex(usableXPA).toString(), -18)) < (10 ** -6) ? 0 : formatNumber(8, tenFill(bnHex(usableXPA).toString(), -18)) || 0} XPA\n                            </span>\n                            <ReactTooltip id={`usable${usableXPA}`} place=\"right\">{Number(tenFill(bnHex(usableXPA).toString(), -18)) < (10 ** -6) ? '0' : tenFill(bnHex(usableXPA).toString(), -18)}</ReactTooltip>\n                        </div>\n                    </div>\n                    <div className=\"close-line\">\n                        <div>\n                            <span>\n                                {t('mortgage.closingLine')}\n                                <Prompt message={t('prompt.closeLine')} />\n                            </span>\n                            <span>\n                                {formatNumber(8, tenFill(bnHex(closingLine).toString(), -16)) || 0}%\n                            </span>\n                        </div>\n                        <div className=\"rate\">\n                            <span>\n                                {t('mortgage.mortgageRate')}\n                            </span>\n                            <span data-tip data-for={`mortgage_rate${mortgageRate}`}>\n                                {formatNumber(8, tenFill(bnHex(mortgageRate).toString(), -16)) || 0}%\n                            </span>\n                            <ReactTooltip id={`mortgage_rate${mortgageRate}`} place=\"right\">{tenFill(bnHex(mortgageRate).toString(), -16)}</ReactTooltip>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"offset-btn divid\">\n                    {renderButton()}\n                </div>\n                <div className=\"mortgage-amount\">\n                    <div className=\"table divid\">\n                        <div className=\"t-header\">\n                            <span />\n                            <span>{t('ratio')}</span>\n                            {/* <span>{t('mortgage.usable')}</span> */}\n                            <span>{t('mortgage.loan')}</span>\n                            <span>{t('mortgage.remain')}</span>\n                        </div>\n                        {this.renderAccount()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMortgageData.defaultProps = {\n    t: () => {},\n    renderButton: () => { return null; }\n};\n\nMortgageData.propTypes = {\n    user: PropTypes.object.isRequired,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    t: PropTypes.func,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired,\n    getUserData: PropTypes.func.isRequired,\n    renderButton: PropTypes.func,\n};\n\nexport default translate('account', { wait: true })(MortgageData);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Web3 from 'web3';\nimport { translate } from 'react-i18next';\nimport './mortgageUser.scss';\nimport { formatNumber } from '../../utils/format';\n\nclass MortgageUser extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        const tokens = Object.values(finalConfig.assetToken);\n        tokens.unshift(finalConfig.XPA);\n        tokens.unshift(finalConfig.ethAddress);\n        this.state = {\n            tokens\n        };\n\n        this.logout = this.logout.bind(this);\n    }\n\n    logout()\n    {\n        window.location.reload();\n        // const { t, toastOpen, actions } = this.props;\n        // const { setUser, updateMyBooks } = actions.userActions;\n        // setUser({});\n        // updateMyBooks([]);\n        // clearTimeInterval();\n        // actions.mortgageActions.mortgageLogout();\n        // setTimeout(() =>\n        // {\n        //     toastOpen(t('logoutSuccess'));\n        // }, 300);\n    }\n\n    render()\n    {\n        const { account, t, tokenList } = this.props;\n        const BN = Web3.utils.BN;\n\n        const list = account.map((l, i) =>\n        {\n            if (this.state.tokens.some(d => d === l.address))\n            {\n                const usable = new BN(l.usable, 16) / (10 ** tokenList.find(d => d.address).decimal);\n                return (\n                    <li key={l.address || i}>\n                        <div>{l.token}</div>\n                        <div>{formatNumber(10, usable)}</div>\n                    </li>\n                );\n            }\n            else\n            {\n                return null;\n            }\n        });\n\n        return (\n            <div className=\"c_mortgageUser\">\n                <div className=\"logout\">\n                    <div className=\"button\" onClick={this.logout}>\n                        <span>{t('logout')}</span>\n                    </div>\n                </div>\n                {/* <button onClick={this.books}>get book</button> */}\n                <h3>{t('balance')}</h3>\n                <div>\n                    <ul>\n                        {list}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nMortgageUser.defaultProps = {\n    t: () => {}\n};\n\nMortgageUser.propTypes = {\n    account: PropTypes.array.isRequired,\n    t: PropTypes.func,\n    tokenList: PropTypes.array.isRequired\n};\n\nexport default translate('account', { wait: true })(MortgageUser);\n","import React from 'react';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { tenFill, bnTen, bnHex } from '../../utils/format';\nimport * as rpc from '../../utils/rpc';\nimport MortgageData from './mortgageData';\n\nimport './mortgageOrder.scss';\n\nclass MortgageOrder extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            token: props.token,\n            select: '',\n            HighestMortgageRate: '-',\n            mortgage: {\n                able: false,\n                value: ''\n            },\n            withdraw: {\n                toggle: false,\n                type: 'USX',\n                able: false,\n                value: ''\n            },\n            repayment: {\n                toggle: false,\n                type: 'USX',\n                able: false,\n                value: ''\n            }\n        };\n\n        this.estimateMortgage = this.estimateMortgage.bind(this);\n        this.select = this.select.bind(this);\n        this.doMortgage = this.doMortgage.bind(this);\n        this.estimateAct = this.estimateAct.bind(this);\n        this.doAct = this.doAct.bind(this);\n        this.openToggle = this.openToggle.bind(this);\n        this.getUserData = this.getUserData.bind(this);\n        this.renderToggle = this.renderToggle.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.clickOutside = this.clickOutside.bind(this);\n        this.autoInputAll = this.autoInputAll.bind(this);\n        this.changeSelect = this.changeSelect.bind(this);\n\n        this.all = false;\n    }\n\n    componentDidMount()\n    {\n        window.addEventListener('click', this.clickOutside);\n    }\n\n    componentWillUnmount()\n    {\n        window.removeEventListener('click', this.clickOutside);\n        this.all = false;\n    }\n\n    async getUserData(userAddress)\n    {\n        const { actions } = this.props;\n\n        actions.mortgageActions.changeMortgageRate(userAddress);\n        actions.mortgageActions.changeEquivalentAmount(userAddress);\n        actions.mortgageActions.changeUsableAmount(userAddress);\n        actions.mortgageActions.changeLoanAmount(userAddress);\n        actions.mortgageActions.changeRemainingAmount(userAddress);\n        actions.mortgageActions.changeUsableXPA(userAddress);\n    }\n\n    clickOutside(e)\n    {\n        const toggle1 = document.querySelectorAll('.toggle-field')[0];\n        const toggle2 = document.querySelectorAll('.toggle-field')[1];\n        if ((toggle1 && !toggle1.contains(e.target)) && (toggle2 && !toggle2.contains(e.target)))\n        {\n            this.setState(update(this.state, {\n                withdraw: {\n                    toggle: { $set: false }\n                },\n                repayment: {\n                    toggle: { $set: false }\n                }\n            }));\n        }\n    }\n\n    changeSelect(e)\n    {\n        e.stopPropagation();\n        this.setState(update(this.state, {\n            [e.target.dataset.item]: {\n                type: { $set: e.target.dataset.key },\n                toggle: { $set: false }\n            },\n        }));\n    }\n\n    handleInput(e)\n    {\n        const { name, value } = e.target;\n        const amount = Number(value) ? `${Math.round(Number(value))}` : value;\n        const able = (Number(amount) && amount > 0) ? true : false;\n\n        this.setState(update(this.state, {\n            [name]: {\n                value: { $set: amount },\n                able: { $set: able }\n            }\n        }));\n\n        this.all = false;\n    }\n\n    async estimateAct(type)\n    {\n        const { remaining, loan, user, toastOpen, t, actions, account, usableXPA } = this.props;\n        const { withdraw, repayment } = this.state;\n        const agent = '';\n        let canUse;\n        let message = type;\n\n        //  如果沒匯入錢包\n        if (!user.wallet) return toastOpen(t('importAlert'));\n        if (user.observer) return toastOpen(`${t('mortgage.observerAlert')}${t('mortgage.mortgage')}`);\n\n        if (type === 'repayment' && this.state[type].value <= 0)\n        {\n            return toastOpen(t('mortgage.mortgageMessage'));\n        }\n\n        if (type === 'withdraw' && withdraw.type === 'XPA')\n        {\n            canUse = usableXPA;\n            message = 'withdrawXPA';\n            if (withdraw.value < 100)\n            {\n                return toastOpen('提領XPA必須大於100');\n            }\n        }\n        else if (type === 'withdraw')\n        {\n            canUse = remaining[withdraw.type];\n        }\n        else // if type = repayment\n        {\n            canUse = loan[repayment.type];\n\n            // 檢查錢包餘額\n            const usable = account.find(tk => tk.address === finalConfig.assetToken[repayment.type]).usable;\n            if ((bnHex(usable)).lt(bnTen(tenFill(this.state[type].value, 18))))\n            {\n                return toastOpen(t('mortgage.walletMessage', { token: repayment.type }));\n            }\n        }\n\n        // 檢查借貸可用額度\n        if ((bnHex(canUse)).lt(bnTen(tenFill(this.state[type].value, 18))))\n        {\n            return toastOpen(t(`mortgage.${message}Message`));\n        }\n\n        const amount = this.all ? `0x${canUse}` : this.state[type].value;\n\n        const fromToken = { token: 'XPA', amount };\n        const toToken = {\n            token: type === 'withdraw' ? withdraw.type : repayment.type,\n            amount: this.state[type].value\n        };\n\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(t('gettingTx'));\n        const tx = await rpc.estimateAct({ amount, cash: this.state[type].type }, user.wallet.address, user.key, type, agent);\n\n        const checkETH = (gas) =>\n        {\n            const eth = account.find(d => d.address === finalConfig.ethAddress);\n            if (Number(tenFill(bnHex(eth.usable).toString(), -18)) < Number(gas))\n            {\n                return toastOpen(`ETH${t('out')}`);\n            }\n        };\n        if (tx)\n        {\n            // this.getUserData(user.wallet.address);\n            actions.modalActions.updateLoading(false);\n            const gas = tenFill((tx.gasPrice * tx.gasLimit), -18);\n            checkETH(gas);\n\n            this.props.modalControl.open('mortgage', {\n                fromToken,\n                toToken,\n                gas,\n                fee: withdraw.type === 'XPA' ? 0 : tenFill(toToken.amount * tx.fee, -18),\n                type,\n                exec: () =>\n                {\n                    this.doAct(tx);\n                }\n            });\n        }\n        else\n        {\n            toastOpen(t('failMessage'));\n            actions.modalActions.updateLoading(false);\n        }\n    }\n\n    autoInputAll(e)\n    {\n        const { remaining, loan, usableXPA } = this.props;\n        const { withdraw, repayment } = this.state;\n        const { type } = e.currentTarget.dataset;\n        let use;\n\n        // 如果是提領XPA, 減少usableXPA | 如果提領其他幣, 減少剩餘 | 如果是歸還, 減少已借\n        if (type === 'withdraw' && withdraw.type === 'XPA')\n        {\n            use = usableXPA;\n        }\n        else if (type === 'withdraw')\n        {\n            use = remaining[withdraw.type];\n        }\n        else if (type === 'repayment')\n        {\n            use = loan[repayment.type];\n        }\n\n        use = bnHex(use).toString();\n\n        this.setState(update(this.state, {\n            [type]: {\n                value: { $set: `${tenFill(use, -18)}` },\n                able: { $set: tenFill(use, -18) > 0 ? true : false }\n            }\n        }));\n\n        this.all = true;\n    }\n\n    async doAct(tx)\n    {\n        const { user, actions, t, modalControl, toastOpen } = this.props;\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(user.observer ? t('dataGenerating') : t('success'));\n\n        const result = await rpc.doAct(tx);\n        if (result)\n        {\n            actions.modalActions.updateLoading(false);\n            this.getUserData(user.wallet.address);\n        }\n        else\n        {\n            actions.modalActions.updateLoading(false);\n            toastOpen(t('failMessage'));\n        }\n\n        modalControl.close();\n\n        this.setState(update(this.state, {\n            withdraw: {\n                able: { $set: false },\n                value: { $set: '' }\n            },\n            repayment: {\n                able: { $set: false },\n                value: { $set: '' }\n            }\n        }));\n    }\n\n    async doMortgage(tx)\n    {\n        const { user, actions, t, modalControl, toastOpen } = this.props;\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(user.observer ? t('dataGenerating') : t('success'));\n\n        const result = await rpc.mortgage(tx);\n        if (result)\n        {\n            actions.modalActions.updateLoading(false);\n            this.getUserData(user.wallet.address);\n        }\n        else\n        {\n            actions.modalActions.updateLoading(false);\n            toastOpen(t('failMessage'));\n        }\n\n        modalControl.close();\n\n        this.setState(update(this.state, {\n            mortgage: {\n                able: { $set: false },\n                value: { $set: '' }\n            }\n        }));\n    }\n\n    async estimateMortgage(e)\n    {\n        e.preventDefault();\n        const { mortgage } = this.state;\n        const { user, tokenList, account, actions, t, toastOpen } = this.props;\n\n        if (!user.wallet) return toastOpen(t('importAlert'));\n        if (user.observer) return toastOpen(`${t('mortgage.observerAlert')}${t('mortgage.mortgage')}`);\n\n        if (mortgage.value < 100) return toastOpen(t('mortgage.mortgageAlert'));\n\n        const token = tokenList\n            .filter(tk => tk.basic === true) //  找basic的token, 日後可能增加XPA以外的\n            .find(list => list.token === this.state.token);\n\n        const use = bnHex(account.find(k => k.address === token.address).usable);\n\n        if (use.lt(bnTen(tenFill(mortgage.value, 18))))\n        {\n            return toastOpen(`${this.state.token} ${t('out')}`);\n        }\n\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(t('gettingTx'));\n\n        const fromToken = { address: token.address, token: 'XPA', amount: mortgage.value };\n        // const toToken = { address: USX, token: 'USX', amount: this.mortgage.value * this.props.price.USX };\n        const tx = await rpc.estimateMortgage(fromToken, '', user.wallet.address, user.key, '');\n\n        const checkETH = (gas) =>\n        {\n            const eth = account.find(d => d.address === finalConfig.ethAddress);\n            if (Number(tenFill(bnHex(eth.usable).toString(), -18)) < Number(gas))\n            {\n                return toastOpen(`ETH${t('out')}`);\n            }\n        };\n\n        if (tx)\n        {\n            actions.modalActions.updateLoading(false);\n            const gas = tenFill((tx.gasPrice * tx.gasLimit), -18);\n            checkETH(gas);\n            this.props.modalControl.open('mortgage', {\n                fromToken,\n                // toToken,\n                gas,\n                fee: 0,\n                type: 'mortgage',\n                exec: () =>\n                {\n                    this.doMortgage(tx);\n                }\n            });\n            actions.modalActions.updateLoading(false);\n        }\n        else\n        {\n            actions.modalActions.updateLoading(false);\n            toastOpen(t('failMessage'));\n        }\n    }\n\n    openToggle(item)\n    {\n        this.setState(update(this.state, {\n            withdraw: {\n                toggle: { $set: false }\n            },\n            repayment: {\n                toggle: { $set: false }\n            }\n        }), () =>\n        {\n            this.setState(update(this.state, {\n                [item]: {\n                    toggle: { $set: true }\n                }\n            }));\n        });\n    }\n\n    select(item)\n    {\n        this.setState(update(this.state, {\n            select: { $set: item }\n        }));\n    }\n\n    renderToggle(type)\n    {\n        const { price } = this.props;\n        const arr = Object.keys(price);\n        if (type === 'withdraw')\n        {\n            arr.push('XPA');\n        }\n        return arr.map((key) =>\n        {\n            return (\n                <div key={key} data-item={type} data-key={key} onClick={this.changeSelect}>{key}</div>\n            );\n        });\n    }\n\n    render()\n    {\n        const { mortgage, select, withdraw, repayment } = this.state;\n        const {\n            mortgageRate,\n            equivalentAmount,\n            usable,\n            loan,\n            remaining,\n            t,\n            user,\n            usableXPA,\n            price,\n            actions\n        } = this.props;\n        const style = 'input-field';\n        return (\n            <div className=\"c_mortgageOrder\">\n                <div className=\"mortgage-input divid\">\n                    <div className=\"item\">\n                        <div>{t('mortgage.Mortgage')}</div>\n                        <div className={select === 0 ? `${style} select` : style} onClick={() => { this.mortgage.focus(); this.select(0); }}>\n                            <input\n                                ref={(input) =>\n                                {\n                                    this.mortgage = input;\n                                }}\n                                type=\"text\"\n                                value={mortgage.value}\n                                name=\"mortgage\"\n                                onChange={this.handleInput}\n                            />\n                            <span>XPA</span>\n                        </div>\n                        <div className={mortgage.able ? 'button' : 'button disable'} onClick={this.estimateMortgage}>\n                            <span>{t('mortgage.Mortgage')}</span>\n                        </div>\n                    </div>\n                </div>\n\n                <MortgageData\n                    mortgageRate={mortgageRate}\n                    equivalentAmount={equivalentAmount}\n                    loan={loan}\n                    usable={usable}\n                    remaining={remaining}\n                    user={user}\n                    usableXPA={usableXPA}\n                    getUserData={this.getUserData}\n                    price={price}\n                    actions={actions}\n                />\n\n                <div className=\"mortgage-input\">\n                    <div className=\"item selectable\">\n                        <div>{t('mortgage.Withdraw')}</div>\n                        <div className=\"toggle-field\" onClick={() => this.openToggle('withdraw')}>\n                            <span>{withdraw.type}</span>\n                            <span>\n                                <img src=\"/img/icon/ic-collapse.svg\" alt=\"dropdown\" />\n                            </span>\n                            <div className={withdraw.toggle ? 'toggle' : 'toggle close'}>\n                                {this.renderToggle('withdraw')}\n                            </div>\n                        </div>\n                        <div className={select === 1 ? `${style} select` : style} onClick={() => { this.select(1); this.withdraw.focus(); }}>\n                            <input\n                                name=\"withdraw\"\n                                type=\"text\"\n                                value={withdraw.value}\n                                ref={(input) =>\n                                {\n                                    this.withdraw = input;\n                                }}\n                                onChange={this.handleInput}\n                            />\n                        </div>\n                        <div className=\"button all\" data-type=\"withdraw\" onClick={this.autoInputAll}>\n                            <span>\n                                {t('mortgage.all')}{t('mortgage.Withdraw')}\n                            </span>\n                        </div>\n                        <div className={withdraw.able ? 'button' : 'button disable'} onClick={() => { this.estimateAct('withdraw'); }}>\n                            <span>{t('mortgage.Withdraw')}</span>\n                        </div>\n                    </div>\n                    <div className=\"item selectable\">\n                        <div>{t('mortgage.Repayment')}</div>\n                        <div className=\"toggle-field\" onClick={() => this.openToggle('repayment')}>\n                            <span>{repayment.type}</span>\n                            <span>\n                                <img src=\"/img/icon/ic-collapse.svg\" alt=\"dropdown\" />\n                            </span>\n                            <div className={repayment.toggle ? 'toggle' : 'toggle close'}>\n                                {this.renderToggle('repayment')}\n                            </div>\n                        </div>\n                        <div className={select === 2 ? `${style} select` : style} onClick={() => { this.select(2); this.repayment.focus(); }}>\n                            <input\n                                type=\"text\"\n                                name=\"repayment\"\n                                value={repayment.value}\n                                ref={(input) =>\n                                {\n                                    this.repayment = input;\n                                }}\n                                onChange={this.handleInput}\n                            />\n                        </div>\n                        <div className=\"button all\" data-type=\"repayment\" onClick={this.autoInputAll}>\n                            <span>\n                                {t('mortgage.all')}{t('mortgage.Repayment')}\n                            </span>\n                        </div>\n                        <div className={repayment.able ? 'button' : 'button disable'} onClick={() => { this.estimateAct('repayment'); }}>\n                            <span>{t('mortgage.Repayment')}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMortgageOrder.defaultProps = {\n    t: () => {}\n};\n\nMortgageOrder.propTypes = {\n    user: PropTypes.object.isRequired,\n    tokenList: PropTypes.array.isRequired,\n    token: PropTypes.string.isRequired,\n    account: PropTypes.array.isRequired,\n    actions: PropTypes.object.isRequired,\n    t: PropTypes.func,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    usable: PropTypes.object.isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired,\n    modalControl: PropTypes.object.isRequired\n};\n\nexport default translate('account', { wait: true })(MortgageOrder);\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { translate } from 'react-i18next';\n\nimport MortgageOrder from '../../components/mortgageOrder/mortgageOrder';\nimport Login from '../../components/login/login';\nimport MortgageUser from '../../components/mortgageUser/mortgageUser';\nimport Header from '../../components/header/header';\nimport Footer from '../../components/footer/footer';\nimport WithPopup from '../../components/withPopup/withPopup';\nimport Prompt from '../../components/prompt/prompt';\n\nimport * as bookActions from '../../actions/book';\nimport * as userActions from '../../actions/user';\nimport * as modalActions from '../../actions/modal';\nimport * as mortgageActions from '../../actions/mortgage';\n\nimport connectFirebase from '../../hoc/connectFirebase';\nimport './mortgage.scss';\n\nconst mapStateToProps = (state) =>\n{\n    return {\n        from: state.book.from,\n        to: state.book.to,\n        user: state.user.user,\n        account: state.user.account,\n        tokenList: state.book.tokenList,\n        loading: state.modal.loading,\n        message: state.modal.message,\n        keep: state.user.keep,\n        mortgageRate: state.mortgage.mortgageRate,\n        equivalentAmount: state.mortgage.equivalentAmount,\n        usable: state.mortgage.usable,\n        loan: state.mortgage.loan,\n        remaining: state.mortgage.remaining,\n        usableXPA: state.mortgage.usableXPA,\n        price: state.mortgage.price\n    };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n{\n    return {\n        actions: {\n            bookActions: bindActionCreators(bookActions, dispatch),\n            userActions: bindActionCreators(userActions, dispatch),\n            modalActions: bindActionCreators(modalActions, dispatch),\n            mortgageActions: bindActionCreators(mortgageActions, dispatch)\n        }\n    };\n};\n\n@connectFirebase\nclass Mortgage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount()\n    {\n        this.props.actions.mortgageActions.changeMortgagePrice();\n    }\n\n    renderUser(modalControl, toastOpen)\n    {\n        const { user, account, actions, tokenList } = this.props;\n        if (user.wallet)\n        {\n            return (\n                <MortgageUser\n                    actions={actions}\n                    account={account}\n                    modalControl={modalControl}\n                    toastOpen={toastOpen}\n                    tokenList={tokenList}\n                />\n            );\n        }\n        else\n        {\n            return (\n                <Login\n                    wallet={user.wallet || {}}\n                    actions={actions}\n                    tokenList={tokenList}\n                    modalControl={modalControl}\n                    toastOpen={toastOpen}\n                />\n            );\n        }\n    }\n\n    render()\n    {\n        const {\n            user,\n            tokenList,\n            account,\n            t,\n            actions,\n            mortgageRate,\n            equivalentAmount,\n            usable,\n            loan,\n            remaining,\n            usableXPA,\n            price\n        } = this.props;\n        return (\n            <WithPopup\n                actions={this.props.actions}\n                loading={this.props.loading}\n                tokenList={this.props.tokenList}\n                keep={this.props.keep}\n                message={this.props.message}\n            >\n                {(modal, toastOpen) => (\n                    <div className=\"co_mortgage\">\n                        <Header />\n                        <nav>\n                            <span><Link to=\"/exchange\">{t('mortgage.index')}</Link></span>\n                            <img src=\"/img/icon/ic-breadthumb.svg\" alt=\"arrow\" />\n                            <span>\n                                {t('mortgage.mortgage')}\n                            </span>\n                        </nav>\n                        <main>\n                            <div className=\"sidebar\">\n                                <div className=\"title\">{t('mortgage.wallet')}</div>\n                                {this.renderUser(modal, toastOpen)}\n                            </div>\n                            <div className=\"main\">\n                                <div className=\"title order\">\n                                    <span>\n                                        {t('mortgage.mortgage')}\n                                        <Prompt message={t('prompt.mortgage')} />\n                                    </span>\n                                    <span><Link to=\"/offset\">{t('mortgage.offset')}</Link></span>\n                                </div>\n                                <MortgageOrder\n                                    user={user}\n                                    tokenList={tokenList}\n                                    token=\"XPA\"\n                                    cash=\"USX\"\n                                    account={account}\n                                    actions={actions}\n                                    mortgageRate={mortgageRate}\n                                    equivalentAmount={equivalentAmount}\n                                    usable={usable}\n                                    loan={loan}\n                                    remaining={remaining}\n                                    usableXPA={usableXPA}\n                                    modalControl={modal}\n                                    toastOpen={toastOpen}\n                                    price={price}\n                                />\n                            </div>\n                        </main>\n                        <Footer />\n                    </div>\n                )}\n            </WithPopup>\n        );\n    }\n}\n\nMortgage.defaultProps = {\n    t: () => {},\n};\n\nMortgage.propTypes = {\n    user: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n    tokenList: PropTypes.array.isRequired,\n    account: PropTypes.array.isRequired,\n    t: PropTypes.func,\n    loading: PropTypes.bool.isRequired,\n    message: PropTypes.string.isRequired,\n    keep: PropTypes.bool.isRequired,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    usable: PropTypes.object.isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(translate('account', { wait: true })(Mortgage));\n"],"sourceRoot":""}