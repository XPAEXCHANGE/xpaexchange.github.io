{"version":3,"sources":["components/footer/footer.js","components/prompt/prompt.js","components/login/login.js","actions/mortgage.js","components/mortgageOrder/mortgageData.js","components/mortgageUser/mortgageUser.js","components/mortgageOrder/offsetOrder.js","containers/offset/offset.js"],"names":["translate","href","target","rel","src","alt","Prompt","props","className","type","message","defaultProps","Login","state","importWallet","bind","createWallet","observe","nextProps","nextState","equal","this","modalControl","open","t","_login","address","loginIO","actions","rpc","onClick","aria-hidden","React","Component","wait","changeMortgageRate","userAddress","dispatch","a","getMortgageRate","data","types","changeEquivalentAmount","getEquvialentAmount","changeUsableAmount","getAmount","changeLoanAmount","changeRemainingAmount","changeUsableXPA","getUsableXPA","mortgageLogout","changeMortgagePrice","getMortgagePrice","MortgageData","HighestMortgageRate","closingLine","renderAccount","user","highest","wallet","setTimeout","getUserData","setState","update","$set","replace","getData","loan","remaining","price","Object","keys","map","key","data-tip","data-for","formatNumber","tenFill","bnHex","toString","id","place","Number","mortgageRate","equivalentAmount","usableXPA","renderButton","MortgageUser","tokens","values","finalConfig","assetToken","unshift","XPA","ethAddress","logout","window","location","reload","account","tokenList","BN","Web3","utils","list","l","i","some","d","usable","find","decimal","token","OffsetOrder","doOffset","estimateOffset","mortgageActions","tx","modalActions","updateLoading","updateMessage","observer","close","e","toastOpen","currentTarget","dataset","agent","v","bnTen","div","checkETH","gas","eth","gasPrice","gasLimit","toToken","fee","gt","mul","exec","k","data-type","Offset","connectFirebase","loading","keep","modal","to","renderUser","cash","connect","from","book","mortgage","bookActions","bindActionCreators","userActions"],"mappings":"qHAAA,mCAqCeA,mBA9BA,WAGX,OACI,gCACI,yCACA,6BACI,uBAAGC,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBACpD,yBAAKC,IAAI,qBAAqBC,IAAI,eAG1C,uCAEI,sCAFJ,uC,uDClBZ,oBAIMC,GAJN,OAIe,SAACC,GAEZ,OACI,yBAAKC,UAAU,YACX,yBAAKJ,IAAG,2BAAqC,IAAfG,EAAME,KAAa,QAAU,GAAnD,QAA6DJ,IAAI,kBACzE,6BACKE,EAAMG,YAMvBJ,EAAOK,aAAe,CAClBF,KAAM,GAQKH,O,+KCfTM,E,kDAEF,WAAYL,GACX,IAAD,8BACI,cAAMA,IACDM,MAAQ,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBANnB,E,kEASsBG,EAAWC,GAE7B,OAAIC,IAAMF,EAAWG,KAAKd,SAAUa,IAAMD,EAAWE,KAAKR,S,qCAW1DQ,KAAKd,MAAMe,aAAaC,KAAK,SAAU,CAAEb,QAASW,KAAKd,MAAMiB,EAAE,yB,qCAK/DH,KAAKd,MAAMe,aAAaC,KAAK,Y,gCAIhC,IAAD,OAEUE,EAAS,SAACC,GACZC,YAAQ,CACJD,WACD,GAAI,WAAY,GAAK,EAAKnB,MAAMqB,UAGvCC,KAAmB,SAACH,GAChBD,EAAOC,MAEXG,KAAwB,SAACH,GACrBD,EAAOC,Q,+BAMd,IACWF,EAAMH,KAAKd,MAAXiB,EACR,OACI,yBAAKhB,UAAU,WACX,4BACI,wBAAIA,UAAU,SAASsB,QAAST,KAAKP,cAAc,8BAAOU,EAAE,kBAC5D,wBAAIhB,UAAU,SAASsB,QAAST,KAAKL,cAAc,8BAAOQ,EAAE,kBAM5D,wBAAIhB,UAAU,SAASsB,QAAST,KAAKJ,SACjC,0CACA,kBAAC,IAAD,CAAQR,KAAM,EAAGC,QAASc,EAAE,oBAC5B,uBAAGhB,UAAU,oBAAoBuB,cAAY,gB,GAnEjDC,IAAMC,WA2E1BrB,EAAMD,aAAe,CACjBa,EAAG,cASQxB,gBAAU,UAAW,CAAEkC,MAAM,GAA7BlC,CAAqCY,I,mgBCrFvCuB,EAAqB,SAACC,GAE/B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBC,YAAgBH,GAFhC,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAUSE,EAAyB,SAACN,GAEnC,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBK,YAAoBP,GAFpC,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAUSI,EAAqB,SAACR,GAE/B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBO,YAAUT,EAAa,UAFvC,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAUSM,EAAmB,SAACV,GAE7B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBO,YAAUT,EAAa,QAFvC,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAUSO,EAAwB,SAACX,GAElC,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBO,YAAUT,EAAa,aAFvC,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAsBSQ,EAAkB,SAACZ,GAE5B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEAEgBW,YAAab,GAF7B,OAEGI,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,uDAUSU,EAAiB,WAE1B,MAAO,CACHzC,KAAMgC,MAIDU,EAAsB,WAE/B,8CAAO,WAAOd,GAAP,eAAAC,EAAA,sEAEgBc,cAFhB,OAEGZ,EAFH,OAGHH,EAAS,CACL5B,KAAMgC,IACND,SALD,2CAAP,wD,oMC7FEa,G,yDAEF,WAAY9C,GACX,IAAD,8BACI,cAAMA,IACDM,MAAQ,CACTyC,oBAAqB,IACrBC,YAAa,KAGjB,EAAKC,cAAgB,EAAKA,cAAczC,KAAnB,gBAPzB,E,gEAWC,IAAD,OACY0C,EAASpC,KAAKd,MAAdkD,MAEK,uCAAG,8BAAAnB,EAAA,sEAEUT,MAFV,cAEN6B,EAFM,gBAGc7B,MAHd,OAGN0B,EAHM,OAKRE,EAAKE,QAELC,YAAW,WAEP,EAAKrD,MAAMsD,YAAYJ,EAAKE,OAAOjC,WACpC,KAGP,EAAKoC,SAASC,IAAO,EAAKlD,MAAO,CAC7ByC,oBAAqB,CAAEU,KAAMN,EAAQO,QAAQ,KAAM,KACnDV,YAAa,CAAES,KAAMT,EAAYU,QAAQ,KAAM,QAfvC,2CAAH,qDAoBbC,K,gDAGsBhD,GACzB,IAAD,OACQA,EAAUuC,KAAKE,QAAUzC,EAAUuC,OAASpC,KAAKd,MAAMkD,MAEvDG,YAAW,WAEP,EAAKrD,MAAMsD,YAAY3C,EAAUuC,KAAKE,OAAOjC,WAC9C,O,sCAKV,IAAD,EACuCL,KAAKd,MAAhC4D,EADZ,EACYA,KAAMC,EADlB,EACkBA,UAAWC,EAD7B,EAC6BA,MAiBzB,OAfiBC,OAAOC,KAAKF,GAAOG,KAAI,SAACC,GAErC,OACI,yBAAKA,IAAKA,GACN,6BAAMA,GACN,0BAAMC,YAAA,EAASC,WAAA,UAAaF,EAAb,UAA0BG,YAAa,EAAGC,YAAQC,YAAMT,EAAMI,IAAMM,YAAa,MAChG,kBAAC,IAAD,CAAcC,GAAE,UAAKP,EAAL,SAAiBQ,MAAM,SAASJ,YAAQC,YAAMT,EAAMI,IAAMM,YAAa,KACvF,0BAAML,YAAA,EAASC,WAAA,UAAaF,EAAb,SAAyBG,YAAa,EAAGC,YAAQC,YAAMX,EAAKM,IAAMM,YAAa,MAC9F,kBAAC,IAAD,CAAcC,GAAE,UAAKP,EAAL,QAAgBQ,MAAM,SAASJ,YAAQC,YAAMX,EAAKM,IAAMM,YAAa,KACrF,0BAAML,YAAA,EAASC,WAAA,UAAaF,EAAb,cAA8BG,YAAa,EAAGM,OAAOL,YAAQC,YAAMV,EAAUK,IAAMM,YAAa,OAC/G,kBAAC,IAAD,CAAcC,GAAE,UAAKP,EAAL,aAAqBQ,MAAM,SAASJ,YAAQC,YAAMV,EAAUK,IAAMM,YAAa,W,+BAS9G,IAAD,EACiD1D,KAAKR,MAA1CyC,EADZ,EACYA,oBAAqBC,EADjC,EACiCA,YADjC,EAE2ElC,KAAKd,MAApE4E,EAFZ,EAEYA,aAAcC,EAF1B,EAE0BA,iBAAkBC,EAF5C,EAE4CA,UAAW7D,EAFvD,EAEuDA,EAAG8D,EAF1D,EAE0DA,aACtD,OACI,yBAAK9E,UAAU,cACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QACX,8BACKgB,EAAE,yBACH,kBAAC,IAAD,CAAQd,QAASc,EAAE,0BAEvB,0BAAMkD,YAAA,EAASC,WAAA,uBAA0BQ,IACpCP,YAAa,EAAGC,YAAQC,YAAMK,GAAcJ,YAAa,MAAQ,EADtE,KAGA,kBAAC,IAAD,CAAcC,GAAE,uBAAkBG,GAAgBF,MAAM,SAASJ,YAAQC,YAAMK,GAAcJ,YAAa,MAE9G,6BACI,8BAAOvD,EAAE,yBACT,8BACKoD,YAAa,EAAGC,YAAQC,YAAMxB,GAAqByB,YAAa,MAAQ,EAD7E,MAIJ,6BACI,8BAAOvD,EAAE,qBACT,0BAAMkD,YAAA,EAASC,WAAA,iBAAoBS,IAAqBR,YAAa,EAAGC,YAAQC,YAAMM,GAAkBL,YAAa,KAArH,QACA,kBAAC,IAAD,CAAcC,GAAE,iBAAYI,GAAoBH,MAAM,SAASJ,YAAQC,YAAMM,GAAkBL,YAAa,MAEhH,6BACI,8BAAOvD,EAAE,wBACT,0BAAMkD,YAAA,EAASC,WAAA,gBAAmBU,IAC7BH,OAAOL,YAAQC,YAAMO,GAAWN,YAAa,KAA7C,SAAqD,IAAO,GAAK,EAAIH,YAAa,EAAGC,YAAQC,YAAMO,GAAWN,YAAa,MAAQ,EADxI,QAGA,kBAAC,IAAD,CAAcC,GAAE,gBAAWK,GAAaJ,MAAM,SAASC,OAAOL,YAAQC,YAAMO,GAAWN,YAAa,KAA7C,SAAqD,IAAO,GAAK,IAAMF,YAAQC,YAAMO,GAAWN,YAAa,OAG5K,yBAAKvE,UAAU,cACX,6BACI,8BACKgB,EAAE,wBACH,kBAAC,IAAD,CAAQd,QAASc,EAAE,uBAEvB,8BACKoD,YAAa,EAAGC,YAAQC,YAAMvB,GAAawB,YAAa,MAAQ,EADrE,MAIJ,yBAAKvE,UAAU,QACX,8BACKgB,EAAE,0BAEP,0BAAMkD,YAAA,EAASC,WAAA,uBAA0BQ,IACpCP,YAAa,EAAGC,YAAQC,YAAMK,GAAcJ,YAAa,MAAQ,EADtE,KAGA,kBAAC,IAAD,CAAcC,GAAE,uBAAkBG,GAAgBF,MAAM,SAASJ,YAAQC,YAAMK,GAAcJ,YAAa,QAItH,yBAAKvE,UAAU,oBACV8E,KAEL,yBAAK9E,UAAU,mBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,YACX,+BACA,8BAAOgB,EAAE,UAET,8BAAOA,EAAE,kBACT,8BAAOA,EAAE,qBAEZH,KAAKmC,uB,GA/IHxB,IAAMC,YAuJjCoB,EAAa1C,aAAe,CACxBa,EAAG,aACH8D,aAAc,WAAQ,OAAO,OAyBlBtF,gBAAU,UAAW,CAAEkC,MAAM,GAA7BlC,CAAqCqD,I,oICrL9CkC,E,kDAEF,WAAYhF,GACX,IAAD,sBACI,cAAMA,GACN,IAAMiF,EAASlB,OAAOmB,OAAOC,YAAYC,YAF7C,OAGIH,EAAOI,QAAQF,YAAYG,KAC3BL,EAAOI,QAAQF,YAAYI,YAC3B,EAAKjF,MAAQ,CACT2E,UAGJ,EAAKO,OAAS,EAAKA,OAAOhF,KAAZ,gBATlB,E,qDAcIiF,OAAOC,SAASC,W,+BAcnB,IAAD,SACsC7E,KAAKd,MAA/B4F,EADZ,EACYA,QAAS3E,EADrB,EACqBA,EAAG4E,EADxB,EACwBA,UACdC,EAAKC,IAAKC,MAAMF,GAEhBG,EAAOL,EAAQ3B,KAAI,SAACiC,EAAGC,GAEzB,GAAI,EAAK7F,MAAM2E,OAAOmB,MAAK,SAAAC,GAAC,OAAIA,IAAMH,EAAE/E,WACxC,CACI,IAAMmF,EAAS,IAAIR,EAAGI,EAAEI,OAAQ,IAAjB,SAAwB,GAAMT,EAAUU,MAAK,SAAAF,GAAC,OAAIA,EAAElF,WAASqF,SAC5E,OACI,wBAAItC,IAAKgC,EAAE/E,SAAWgF,GAClB,6BAAMD,EAAEO,OACR,6BAAMpC,YAAa,GAAIiC,KAM/B,OAAO,QAIf,OACI,yBAAKrG,UAAU,kBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SAASsB,QAAST,KAAK0E,QAClC,8BAAOvE,EAAE,aAIjB,4BAAKA,EAAE,YACP,6BACI,4BACKgF,S,GAhEExE,IAAMC,WAwEjCsD,EAAa5E,aAAe,CACxBa,EAAG,cASQxB,gBAAU,UAAW,CAAEkC,MAAM,GAA7BlC,CAAqCuF,I,iOChF9C0B,G,yDAEF,WAAY1G,GACX,IAAD,8BACI,cAAMA,IAED2G,SAAW,EAAKA,SAASnG,KAAd,gBAChB,EAAKoG,eAAiB,EAAKA,eAAepG,KAApB,gBACtB,EAAK8C,YAAc,EAAKA,YAAY9C,KAAjB,gBACnB,EAAKuE,aAAe,EAAKA,aAAavE,KAAlB,gBANxB,E,wDASYqB,GACX,IACWR,EAAYP,KAAKd,MAAjBqB,QACRA,EAAQwF,gBAAgBjF,mBAAmBC,GAC3CR,EAAQwF,gBAAgB1E,uBAAuBN,GAC/CR,EAAQwF,gBAAgBxE,mBAAmBR,GAC3CR,EAAQwF,gBAAgBtE,iBAAiBV,GACzCR,EAAQwF,gBAAgBrE,sBAAsBX,GAC9CR,EAAQwF,gBAAgBpE,gBAAgBZ,K,wEAG7BiF,G,wFAEgChG,KAAKd,MAAxCkD,E,EAAAA,KAAM7B,E,EAAAA,QAASJ,E,EAAAA,EAAGF,E,EAAAA,aAC1BM,EAAQ0F,aAAaC,eAAc,GACnC3F,EAAQ0F,aAAaE,cAAc/D,EAAKgE,SAAWjG,EAAE,kBAAoBA,EAAE,Y,SAEtDK,IAAawF,G,gBAG9BzF,EAAQ0F,aAAaC,eAAc,GACnClG,KAAKwC,YAAYJ,EAAKE,OAAOjC,UAGjCE,EAAQ0F,aAAaC,eAAc,GACnCjG,EAAaoG,Q,qLAGIC,G,iHAE+DtG,KAAKd,MAA7E4D,E,EAAAA,KAAMV,E,EAAAA,KAAMmE,E,EAAAA,UAAWpG,E,EAAAA,EAAGI,E,EAAAA,QAASwD,E,EAAAA,iBAAkBf,E,EAAAA,MAAO8B,E,EAAAA,QAC9D1F,EAAOkH,EAAEE,cAAcC,QAAQrH,KAC/BsH,EAAQ,IACVtE,EAAKgE,S,yCAAiBG,EAAU,GAAD,OAAIpG,EAAE,2BAAN,OAAkCA,EAAE,sB,YAElE2C,EAAK1D,GAAQ,GAAKyE,OAAOE,IAAqB,IAAO3B,EAAKE,O,yCAAeiE,EAAUpG,EAAE,4B,cAC1FI,EAAQ0F,aAAaC,eAAc,GACnC3F,EAAQ0F,aAAaE,cAAchG,EAAE,c,UAEpBK,IAAmB4B,EAAKE,OAAOjC,QAAS+B,EAAKgB,IAAKhE,EAAMsH,G,QAAnEV,E,OAEAW,EAAIC,YAAMpD,YAAQC,YAAMX,EAAK1D,IAAOsE,WAAY,KAAKmD,IAAIpD,YAAMT,EAAM5D,KACrEW,EAAQ0D,YAAMM,GAEd+C,EAAW,SAACC,GAEd,IAAMC,EAAMlC,EAAQW,MAAK,SAAAF,GAAC,OAAIA,EAAElF,UAAYgE,YAAYI,cACxD,GAAIZ,OAAOL,YAAQC,YAAMuD,EAAIxB,QAAQ9B,YAAa,KAAOG,OAAOkD,GAE5D,OAAOR,EAAU,MAAD,OAAOpG,EAAE,UAI7B6F,GAEAzF,EAAQ0F,aAAaC,eAAc,GAC7Ba,EAAMvD,YAASwC,EAAGiB,SAAWjB,EAAGkB,UAAY,IAClDJ,EAASC,GACT/G,KAAKd,MAAMe,aAAaC,KAAK,SAAU,CACnCiH,QAAS,CAAExB,MAAOvG,GAClB2H,MACAK,IAAKT,EAAEU,GAAGtH,GAASyD,YAAQzD,EAAMuH,IAAI7D,YAAMuC,EAAGoB,MAAM1D,YAAa,IAAMF,YAAQmD,EAAEW,IAAI7D,YAAMuC,EAAGoB,MAAM1D,YAAa,IACjHtE,KAAM,SACNmI,KAAM,WAEF,EAAK1B,SAASG,OAMtBzF,EAAQ0F,aAAaC,eAAc,G,6IAK1C,IAAD,SAC0ClG,KAAKd,MAAnC4D,EADZ,EACYA,KAAMiB,EADlB,EACkBA,iBAAkB5D,EADpC,EACoCA,EAWhC,OAViB8C,OAAOC,KAAKJ,GAAMK,KAAI,SAACqE,GAEpC,OACI,yBAAKrI,UAAU,OAAOiE,IAAKoE,GACvB,yBAAKrI,UAAY0E,OAAO,KAAD,OAAMf,EAAK0E,KAAQ,GAAM/D,YAAMM,GAAkBL,WAAc,EAAK,SAAW,iBAAkB+D,YAAWD,EAAG/G,QAAS,EAAKqF,gBAChJ,8BAAO3F,EAAE,mBAAT,IAA8BqH,U,+BASjD,IAAD,EACyGxH,KAAKd,MAAlG4E,EADZ,EACYA,aAAcC,EAD1B,EAC0BA,iBAAkByB,EAD5C,EAC4CA,OAAQ1C,EADpD,EACoDA,KAAMC,EAD1D,EAC0DA,UAAWX,EADrE,EACqEA,KAAM4B,EAD3E,EAC2EA,UAAWhB,EADtF,EACsFA,MAAOzC,EAD7F,EAC6FA,QACzF,OACI,yBAAKpB,UAAU,0BACX,kBAAC,IAAD,CACI2E,aAAcA,EACdC,iBAAkBA,EAClBjB,KAAMA,EACN0C,OAAQA,EACRzC,UAAWA,EACXX,KAAMA,EACN4B,UAAWA,EACXhB,MAAOA,EACPR,YAAaxC,KAAKwC,YAClBjC,QAASA,EACT0D,aAAcjE,KAAKiE,oB,GAvHbtD,IAAMC,YA8HhCgF,EAAYtG,aAAe,CACvBa,EAAG,cA2BQxB,I,EAAAA,cAAU,UAAW,CAAEkC,MAAM,GAA7BlC,CAAqCiH,G,iGC1G9C8B,G,OADLC,Y,oDAGG,WAAYzI,GACX,IAAD,8BACI,cAAMA,IACDM,MAAQ,GAFjB,E,gEAOIQ,KAAKd,MAAMqB,QAAQwF,gBAAgBjE,wB,iCAG5B7B,EAAcsG,GACxB,IAAD,EACkDvG,KAAKd,MAA3CkD,EADZ,EACYA,KAAM0C,EADlB,EACkBA,QAASvE,EAD3B,EAC2BA,QAASwE,EADpC,EACoCA,UAChC,OAAI3C,EAAKE,OAGD,kBAAC,IAAD,CACI/B,QAASA,EACTuE,QAASA,EACT7E,aAAcA,EACdsG,UAAWA,EACXxB,UAAWA,IAOf,kBAAC,IAAD,CACIzC,OAAQF,EAAKE,QAAU,GACvB/B,QAASA,EACTwE,UAAWA,EACX9E,aAAcA,EACdsG,UAAWA,M,+BAO1B,IAAD,SAcQvG,KAAKd,MAZLkD,EAFR,EAEQA,KACA2C,EAHR,EAGQA,UACAD,EAJR,EAIQA,QACA3E,EALR,EAKQA,EACAI,EANR,EAMQA,QACAuD,EAPR,EAOQA,aACAC,EARR,EAQQA,iBACAyB,EATR,EASQA,OACA1C,EAVR,EAUQA,KACAC,EAXR,EAWQA,UACAiB,EAZR,EAYQA,UACAhB,EAbR,EAaQA,MAEJ,OACI,kBAAC,IAAD,CACIzC,QAASP,KAAKd,MAAMqB,QACpBqH,QAAS5H,KAAKd,MAAM0I,QACpB7C,UAAW/E,KAAKd,MAAM6F,UACtB8C,KAAM7H,KAAKd,MAAM2I,KACjBxI,QAASW,KAAKd,MAAMG,UAEnB,SAACyI,EAAOvB,GAAR,OACG,yBAAKpH,UAAU,eACX,kBAAC,IAAD,MACA,6BACI,8BAAM,kBAAC,IAAD,CAAM4I,GAAG,aAAa5H,EAAE,oBAC9B,yBAAKpB,IAAI,8BAA8BC,IAAI,UAC3C,8BAAM,kBAAC,IAAD,CAAM+I,GAAG,aAAa5H,EAAE,uBAC9B,yBAAKpB,IAAI,8BAA8BC,IAAI,UAC3C,8BAAOmB,EAAE,qBAEb,8BACI,6BACI,yBAAKhB,UAAU,SAASgB,EAAE,oBACzB,EAAK6H,WAAWF,EAAOvB,IAE5B,6BACI,yBAAKpH,UAAU,eACX,0BAAMA,UAAU,UACXgB,EAAE,mBACH,kBAAC,IAAD,CAAQd,QAASc,EAAE,oBAEvB,8BAAM,kBAAC,IAAD,CAAM4H,GAAG,aAAa5H,EAAE,wBAElC,kBAAC,EAAD,CACIiC,KAAMA,EACN2C,UAAWA,EACXY,MAAM,MACNsC,KAAK,MACLnD,QAASA,EACTvE,QAASA,EACTuD,aAAcA,EACdC,iBAAkBA,EAClByB,OAAQA,EACR1C,KAAMA,EACNC,UAAWA,EACXiB,UAAWA,EACXhB,MAAOA,EACP/C,aAAc6H,EACdvB,UAAWA,MAIvB,kBAAC,IAAD,c,GA5GH5F,IAAMC,a,GAoH3B8G,EAAOpI,aAAe,CAClBa,EAAG,cA8BQ+H,uBArLS,SAAC1I,GAErB,MAAO,CACH2I,KAAM3I,EAAM4I,KAAKD,KACjBJ,GAAIvI,EAAM4I,KAAKL,GACf3F,KAAM5C,EAAM4C,KAAKA,KACjB0C,QAAStF,EAAM4C,KAAK0C,QACpBC,UAAWvF,EAAM4I,KAAKrD,UACtB6C,QAASpI,EAAMsI,MAAMF,QACrBvI,QAASG,EAAMsI,MAAMzI,QACrBwI,KAAMrI,EAAM4C,KAAKyF,KACjB/D,aAActE,EAAM6I,SAASvE,aAC7BC,iBAAkBvE,EAAM6I,SAAStE,iBACjCyB,OAAQhG,EAAM6I,SAAS7C,OACvB1C,KAAMtD,EAAM6I,SAASvF,KACrBC,UAAWvD,EAAM6I,SAAStF,UAC1BiB,UAAWxE,EAAM6I,SAASrE,UAC1BhB,MAAOxD,EAAM6I,SAASrF,UAIH,SAAChC,GAExB,MAAO,CACHT,QAAS,CACL+H,YAAaC,YAAmBD,EAAatH,GAC7CwH,YAAaD,YAAmBC,EAAaxH,GAC7CiF,aAAcsC,YAAmBtC,EAAcjF,GAC/C+E,gBAAiBwC,YAAmBxC,EAAiB/E,OAyJlDkH,CAA6CvJ,YAAU,UAAW,CAAEkC,MAAM,GAA7BlC,CAAqC+I","file":"static/js/10.27432d85.chunk.js","sourcesContent":["import React from 'react';\n// import { Link } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\n\nimport './footer.scss';\n\nconst Footer = () =>\n{\n    // const { t } = props;\n    return (\n        <footer>\n            <p>Powered by</p>\n            <div>\n                <a href=\"https://www.tideisun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img src=\"/img/logo-lite.png\" alt=\"tideisun\" />\n                </a>\n            </div>\n            <p>\n                Copyright\n                <span>©</span>\n                TideiSun. All rights reserved.\n            </p>\n            {/* <p><Link to=\"privacy\">{t('footer.term')}</Link></p> */}\n            {/* <p><Link to=\"privacy\">{t('footer.privacy')}</Link></p> */}\n        </footer>\n    );\n};\n\n// Footer.defaultProps = {\n//     t: () => {}\n// };\n\n// Footer.propTypes = {\n//     t: PropTypes.func\n// };\n\nexport default translate()(Footer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './prompt.scss';\n\nconst Prompt = (props) =>\n{\n    return (\n        <div className=\"c_prompt\">\n            <img src={`/img/icon/ic-help${props.type === 1 ? '-gray' : ''}.svg`} alt=\"question mark\" />\n            <div>\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nPrompt.defaultProps = {\n    type: 1\n};\n\nPrompt.propTypes = {\n    type: PropTypes.number,\n    message: PropTypes.string.isRequired\n};\n\nexport default Prompt;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport equal from 'deep-equal';\n\nimport { loginIO } from '../../utils/login';\nimport Prompt from '../prompt/prompt';\nimport './login.scss';\nimport * as rpc from '../../utils/rpc';\n\nclass Login extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n\n        this.importWallet = this.importWallet.bind(this);\n        this.createWallet = this.createWallet.bind(this);\n        this.observe = this.observe.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps, nextState)\n    {\n        if (equal(nextProps, this.props) && equal(nextState, this.state))\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n    createWallet()\n    {\n        this.props.modalControl.open('create', { message: this.props.t('notDownloadWallet') });\n    }\n\n    importWallet()\n    {\n        this.props.modalControl.open('import');\n    }\n\n    observe()\n    {\n        // this.props.modalControl.open('observer');\n        const _login = (address) => {\n            loginIO({\n                address\n            }, '', 'metamask', '',  this.props.actions)\n        };\n\n        rpc.startExtension((address) => {\n            _login(address)\n        });\n        rpc.setExtensionAddress((address) => {\n            _login(address)\n        });\n\n    }\n\n    render()\n    {\n        const { t } = this.props;\n        return (\n            <div className=\"c_login\">\n                <ul>\n                    <li className=\"button\" onClick={this.importWallet}><span>{t('importWallet')}</span></li>\n                    <li className=\"button\" onClick={this.createWallet}><span>{t('createWallet')}</span></li>\n                    {/* <li className=\"unique\" onClick={this.observe}>\n                        <span>TideWallet Connect</span>\n                        <Prompt type={2} message={t('prompt.obsever')} />\n                        <i className=\"fa fa-angle-right\" aria-hidden=\"true\" />\n                    </li> */}\n                    <li className=\"unique\" onClick={this.observe}>\n                        <span>MetaMask</span>\n                        <Prompt type={2} message={t('prompt.obsever')} />\n                        <i className=\"fa fa-angle-right\" aria-hidden=\"true\" />\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nLogin.defaultProps = {\n    t: () => {},\n};\n\nLogin.propTypes = {\n    t: PropTypes.func,\n    modalControl: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n};\n\nexport default translate('account', { wait: true })(Login);\n\n","import * as types from '../constants/actionTypeMortgage';\nimport {\n    getMortgageRate,\n    getEquvialentAmount,\n    getAmount,\n    getUsableXPA,\n    getMortgagePrice\n    // getClosingLine\n} from '../utils/rpc';\n\nexport const changeMortgageRate = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getMortgageRate(userAddress);\n        dispatch({\n            type: types.CHANGE_MORTGAGE_RATE,\n            data\n        });\n    };\n};\n\nexport const changeEquivalentAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getEquvialentAmount(userAddress);\n        dispatch({\n            type: types.CHANGE_EQUIVALENT_AMOUNT,\n            data\n        });\n    };\n};\n\nexport const changeUsableAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'usable');\n        dispatch({\n            type: types.CHANGE_USABLE,\n            data\n        });\n    };\n};\n\nexport const changeLoanAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'loan');\n        dispatch({\n            type: types.CHANGE_LOAN,\n            data\n        });\n    };\n};\n\nexport const changeRemainingAmount = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getAmount(userAddress, 'remaining');\n        dispatch({\n            type: types.CHANGE_REMAINING,\n            data\n        });\n    };\n};\n\n// export const mappingAssets = () =>\n// {\n//     return async (dispatch) =>\n//     {\n//         const data = await getAssets();\n//         dispatch({\n//             type: types.MAPPING_ASSETS,\n//             data\n//         });\n//     };\n// };\n\nexport const changeUsableXPA = (userAddress) =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getUsableXPA(userAddress);\n        dispatch({\n            type: types.CHANGE_USABLE_XPA,\n            data\n        });\n    };\n};\n\nexport const mortgageLogout = () =>\n{\n    return {\n        type: types.MORTGAGE_LOGOUT,\n    };\n};\n\nexport const changeMortgagePrice = () =>\n{\n    return async (dispatch) =>\n    {\n        const data = await getMortgagePrice();\n        dispatch({\n            type: types.CHANGE_MORTGAGE_PRICE,\n            data\n        });\n    };\n};\n\n// export const changeClosingLine = () =>\n// {\n//     return async (dispatch) =>\n//     {\n//         const data = await getClosingLine();\n//         dispatch({\n//             type: types.CHANGE_CLOSING_LINE,\n//             data\n//         });\n//     };\n// };\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { translate } from 'react-i18next';\nimport ReactTooltip from 'react-tooltip';\nimport * as rpc from '../../utils/rpc';\nimport { formatNumber, tenFill, bnHex } from '../../utils/format';\nimport Prompt from '../prompt/prompt';\nimport './mortgageOrder.scss';\n\nclass MortgageData extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            HighestMortgageRate: '-',\n            closingLine: '-',\n        };\n\n        this.renderAccount = this.renderAccount.bind(this);\n    }\n\n    componentDidMount()\n    {\n        const { user } = this.props;\n\n        const getData = async () =>\n        {\n            const highest = await rpc.getHighestMortgageRate();\n            const closingLine = await rpc.getClosingLine();\n\n            if (user.wallet)\n            {\n                setTimeout(() =>\n                {\n                    this.props.getUserData(user.wallet.address);\n                }, 200);\n            }\n\n            this.setState(update(this.state, {\n                HighestMortgageRate: { $set: highest.replace('0x', '') },\n                closingLine: { $set: closingLine.replace('0x', '') },\n            }));\n        };\n\n\n        getData();\n    }\n\n    componentWillReceiveProps(nextProps)\n    {\n        if (nextProps.user.wallet && nextProps.user !== this.props.user)\n        {\n            setTimeout(() =>\n            {\n                this.props.getUserData(nextProps.user.wallet.address);\n            }, 200);\n        }\n    }\n\n    renderAccount()\n    {\n        const { loan, remaining, price } = this.props;\n\n        const template = Object.keys(price).map((key) =>\n        {\n            return (\n                <div key={key}>\n                    <div>{key}</div>\n                    <span data-tip data-for={`${key}price`}>{formatNumber(7, tenFill(bnHex(price[key]).toString(), -18))}</span>\n                    <ReactTooltip id={`${key}price`} place=\"right\">{tenFill(bnHex(price[key]).toString(), -18)}</ReactTooltip>\n                    <span data-tip data-for={`${key}loan`}>{formatNumber(7, tenFill(bnHex(loan[key]).toString(), -18))}</span>\n                    <ReactTooltip id={`${key}loan`} place=\"right\">{tenFill(bnHex(loan[key]).toString(), -18)}</ReactTooltip>\n                    <span data-tip data-for={`${key}remaining`}>{formatNumber(7, Number(tenFill(bnHex(remaining[key]).toString(), -18)))}</span>\n                    <ReactTooltip id={`${key}remaining`} place=\"right\">{tenFill(bnHex(remaining[key]).toString(), -18)}</ReactTooltip>\n                </div>\n            );\n        });\n\n        return template;\n    }\n\n    render()\n    {\n        const { HighestMortgageRate, closingLine } = this.state;\n        const { mortgageRate, equivalentAmount, usableXPA, t, renderButton } = this.props;\n        return (\n            <div className=\"order-info\">\n                <div className=\"mortgage-rate divid\">\n                    <div className=\"infor\">\n                        <div className=\"rate\">\n                            <span>\n                                {t('mortgage.mortgageRate')}\n                                <Prompt message={t('prompt.mortgageRate')} />\n                            </span>\n                            <span data-tip data-for={`mortgage_rate${mortgageRate}`}>\n                                {formatNumber(8, tenFill(bnHex(mortgageRate).toString(), -16)) || 0}%\n                            </span>\n                            <ReactTooltip id={`mortgage_rate${mortgageRate}`} place=\"right\">{tenFill(bnHex(mortgageRate).toString(), -16)}</ReactTooltip>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.highestRate')}</span>\n                            <span>\n                                {formatNumber(8, tenFill(bnHex(HighestMortgageRate).toString(), -16)) || 0}%\n                            </span>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.equival')}</span>\n                            <span data-tip data-for={`equival${equivalentAmount}`}>{formatNumber(8, tenFill(bnHex(equivalentAmount).toString(), -18))} XPA</span>\n                            <ReactTooltip id={`equival${equivalentAmount}`} place=\"right\">{tenFill(bnHex(equivalentAmount).toString(), -18)}</ReactTooltip>\n                        </div>\n                        <div>\n                            <span>{t('mortgage.detachable')}</span>\n                            <span data-tip data-for={`usable${usableXPA}`}>\n                                {Number(tenFill(bnHex(usableXPA).toString(), -18)) < (10 ** -6) ? 0 : formatNumber(8, tenFill(bnHex(usableXPA).toString(), -18)) || 0} XPA\n                            </span>\n                            <ReactTooltip id={`usable${usableXPA}`} place=\"right\">{Number(tenFill(bnHex(usableXPA).toString(), -18)) < (10 ** -6) ? '0' : tenFill(bnHex(usableXPA).toString(), -18)}</ReactTooltip>\n                        </div>\n                    </div>\n                    <div className=\"close-line\">\n                        <div>\n                            <span>\n                                {t('mortgage.closingLine')}\n                                <Prompt message={t('prompt.closeLine')} />\n                            </span>\n                            <span>\n                                {formatNumber(8, tenFill(bnHex(closingLine).toString(), -16)) || 0}%\n                            </span>\n                        </div>\n                        <div className=\"rate\">\n                            <span>\n                                {t('mortgage.mortgageRate')}\n                            </span>\n                            <span data-tip data-for={`mortgage_rate${mortgageRate}`}>\n                                {formatNumber(8, tenFill(bnHex(mortgageRate).toString(), -16)) || 0}%\n                            </span>\n                            <ReactTooltip id={`mortgage_rate${mortgageRate}`} place=\"right\">{tenFill(bnHex(mortgageRate).toString(), -16)}</ReactTooltip>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"offset-btn divid\">\n                    {renderButton()}\n                </div>\n                <div className=\"mortgage-amount\">\n                    <div className=\"table divid\">\n                        <div className=\"t-header\">\n                            <span />\n                            <span>{t('ratio')}</span>\n                            {/* <span>{t('mortgage.usable')}</span> */}\n                            <span>{t('mortgage.loan')}</span>\n                            <span>{t('mortgage.remain')}</span>\n                        </div>\n                        {this.renderAccount()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMortgageData.defaultProps = {\n    t: () => {},\n    renderButton: () => { return null; }\n};\n\nMortgageData.propTypes = {\n    user: PropTypes.object.isRequired,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    t: PropTypes.func,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired,\n    getUserData: PropTypes.func.isRequired,\n    renderButton: PropTypes.func,\n};\n\nexport default translate('account', { wait: true })(MortgageData);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Web3 from 'web3';\nimport { translate } from 'react-i18next';\nimport './mortgageUser.scss';\nimport { formatNumber } from '../../utils/format';\n\nclass MortgageUser extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        const tokens = Object.values(finalConfig.assetToken);\n        tokens.unshift(finalConfig.XPA);\n        tokens.unshift(finalConfig.ethAddress);\n        this.state = {\n            tokens\n        };\n\n        this.logout = this.logout.bind(this);\n    }\n\n    logout()\n    {\n        window.location.reload();\n        // const { t, toastOpen, actions } = this.props;\n        // const { setUser, updateMyBooks } = actions.userActions;\n        // setUser({});\n        // updateMyBooks([]);\n        // clearTimeInterval();\n        // actions.mortgageActions.mortgageLogout();\n        // setTimeout(() =>\n        // {\n        //     toastOpen(t('logoutSuccess'));\n        // }, 300);\n    }\n\n    render()\n    {\n        const { account, t, tokenList } = this.props;\n        const BN = Web3.utils.BN;\n\n        const list = account.map((l, i) =>\n        {\n            if (this.state.tokens.some(d => d === l.address))\n            {\n                const usable = new BN(l.usable, 16) / (10 ** tokenList.find(d => d.address).decimal);\n                return (\n                    <li key={l.address || i}>\n                        <div>{l.token}</div>\n                        <div>{formatNumber(10, usable)}</div>\n                    </li>\n                );\n            }\n            else\n            {\n                return null;\n            }\n        });\n\n        return (\n            <div className=\"c_mortgageUser\">\n                <div className=\"logout\">\n                    <div className=\"button\" onClick={this.logout}>\n                        <span>{t('logout')}</span>\n                    </div>\n                </div>\n                {/* <button onClick={this.books}>get book</button> */}\n                <h3>{t('balance')}</h3>\n                <div>\n                    <ul>\n                        {list}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nMortgageUser.defaultProps = {\n    t: () => {}\n};\n\nMortgageUser.propTypes = {\n    account: PropTypes.array.isRequired,\n    t: PropTypes.func,\n    tokenList: PropTypes.array.isRequired\n};\n\nexport default translate('account', { wait: true })(MortgageUser);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport * as rpc from '../../utils/rpc';\nimport MortgageData from './mortgageData';\nimport { bnHex, bnTen, tenFill } from '../../utils/format';\n\nimport './mortgageOrder.scss';\n\nclass OffsetOrder extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.doOffset = this.doOffset.bind(this);\n        this.estimateOffset = this.estimateOffset.bind(this);\n        this.getUserData = this.getUserData.bind(this);\n        this.renderButton = this.renderButton.bind(this);\n    }\n\n    getUserData(userAddress)\n    {\n        const { actions } = this.props;\n        actions.mortgageActions.changeMortgageRate(userAddress);\n        actions.mortgageActions.changeEquivalentAmount(userAddress);\n        actions.mortgageActions.changeUsableAmount(userAddress);\n        actions.mortgageActions.changeLoanAmount(userAddress);\n        actions.mortgageActions.changeRemainingAmount(userAddress);\n        actions.mortgageActions.changeUsableXPA(userAddress);\n    }\n\n    async doOffset(tx)\n    {\n        const { user, actions, t, modalControl } = this.props;\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(user.observer ? t('dataGenerating') : t('success'));\n\n        const result = await rpc.doOffset(tx);\n        if (result)\n        {\n            actions.modalActions.updateLoading(false);\n            this.getUserData(user.wallet.address);\n        }\n\n        actions.modalActions.updateLoading(false);\n        modalControl.close();\n    }\n\n    async estimateOffset(e)\n    {\n        const { loan, user, toastOpen, t, actions, equivalentAmount, price, account } = this.props;\n        const type = e.currentTarget.dataset.type;\n        const agent = '';\n        if (user.observer) return toastOpen(`${t('mortgage.observerAlert')}${t('mortgage.offset')}`);\n\n        if ((loan[type] > 0 && Number(equivalentAmount) <= 0) || !user.wallet) return toastOpen(t('mortgage.offsetMessage'));\n        actions.modalActions.updateLoading(true);\n        actions.modalActions.updateMessage(t('gettingTx'));\n\n        const tx = await rpc.estimateOffset(user.wallet.address, user.key, type, agent);\n\n        const v = bnTen(tenFill(bnHex(loan[type]).toString(), 18)).div(bnHex(price[type]));\n        const equal = bnHex(equivalentAmount);\n\n        const checkETH = (gas) =>\n        {\n            const eth = account.find(d => d.address === finalConfig.ethAddress);\n            if (Number(tenFill(bnHex(eth.usable).toString(), -18)) < Number(gas))\n            {\n                return toastOpen(`ETH${t('out')}`);\n            }\n        };\n\n        if (tx)\n        {\n            actions.modalActions.updateLoading(false);\n            const gas = tenFill((tx.gasPrice * tx.gasLimit), -18);\n            checkETH(gas);\n            this.props.modalControl.open('offset', {\n                toToken: { token: type },\n                gas,\n                fee: v.gt(equal) ? tenFill(equal.mul(bnHex(tx.fee)).toString(), -36) : tenFill(v.mul(bnHex(tx.fee)).toString(), -36),\n                type: 'offset',\n                exec: () =>\n                {\n                    this.doOffset(tx);\n                }\n            });\n        }\n        else\n        {\n            actions.modalActions.updateLoading(false);\n        }\n    }\n\n    renderButton()\n    {\n        const { loan, equivalentAmount, t } = this.props;\n        const template = Object.keys(loan).map((k) =>\n        {\n            return (\n                <div className=\"item\" key={k}>\n                    <div className={(Number(`0x${loan[k]}`) > 0 && (bnHex(equivalentAmount).toString()) > 0) ? 'button' : 'button disable'} data-type={k} onClick={this.estimateOffset} >\n                        <span>{t('mortgage.Offset')} {k}</span>\n                    </div>\n                </div>\n            );\n        });\n        return template;\n    }\n\n    render()\n    {\n        const { mortgageRate, equivalentAmount, usable, loan, remaining, user, usableXPA, price, actions } = this.props;\n        return (\n            <div className=\"c_mortgageOrder offset\">\n                <MortgageData\n                    mortgageRate={mortgageRate}\n                    equivalentAmount={equivalentAmount}\n                    loan={loan}\n                    usable={usable}\n                    remaining={remaining}\n                    user={user}\n                    usableXPA={usableXPA}\n                    price={price}\n                    getUserData={this.getUserData}\n                    actions={actions}\n                    renderButton={this.renderButton}\n                />\n            </div>\n        );\n    }\n}\n\nOffsetOrder.defaultProps = {\n    t: () => {}\n};\n\nOffsetOrder.propTypes = {\n    user: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n    t: PropTypes.func,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    usable: PropTypes.object.isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired,\n    modalControl: PropTypes.object.isRequired,\n    account: PropTypes.array.isRequired\n};\n\nexport default translate('account', { wait: true })(OffsetOrder);\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { translate } from 'react-i18next';\n\nimport OffsetOrder from '../../components/mortgageOrder/offsetOrder';\nimport Login from '../../components/login/login';\nimport MortgageUser from '../../components/mortgageUser/mortgageUser';\nimport Header from '../../components/header/header';\nimport Footer from '../../components/footer/footer';\nimport WithPopup from '../../components/withPopup/withPopup';\nimport Prompt from '../../components/prompt/prompt';\n\nimport * as bookActions from '../../actions/book';\nimport * as userActions from '../../actions/user';\nimport * as modalActions from '../../actions/modal';\nimport * as mortgageActions from '../../actions/mortgage';\n\nimport connectFirebase from '../../hoc/connectFirebase';\nimport '../mortgage/mortgage.scss';\n\nconst mapStateToProps = (state) =>\n{\n    return {\n        from: state.book.from,\n        to: state.book.to,\n        user: state.user.user,\n        account: state.user.account,\n        tokenList: state.book.tokenList,\n        loading: state.modal.loading,\n        message: state.modal.message,\n        keep: state.user.keep,\n        mortgageRate: state.mortgage.mortgageRate,\n        equivalentAmount: state.mortgage.equivalentAmount,\n        usable: state.mortgage.usable,\n        loan: state.mortgage.loan,\n        remaining: state.mortgage.remaining,\n        usableXPA: state.mortgage.usableXPA,\n        price: state.mortgage.price\n    };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n{\n    return {\n        actions: {\n            bookActions: bindActionCreators(bookActions, dispatch),\n            userActions: bindActionCreators(userActions, dispatch),\n            modalActions: bindActionCreators(modalActions, dispatch),\n            mortgageActions: bindActionCreators(mortgageActions, dispatch)\n        }\n    };\n};\n\n@connectFirebase\nclass Offset extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount()\n    {\n        this.props.actions.mortgageActions.changeMortgagePrice();\n    }\n\n    renderUser(modalControl, toastOpen)\n    {\n        const { user, account, actions, tokenList } = this.props;\n        if (user.wallet)\n        {\n            return (\n                <MortgageUser\n                    actions={actions}\n                    account={account}\n                    modalControl={modalControl}\n                    toastOpen={toastOpen}\n                    tokenList={tokenList}\n                />\n            );\n        }\n        else\n        {\n            return (\n                <Login\n                    wallet={user.wallet || {}}\n                    actions={actions}\n                    tokenList={tokenList}\n                    modalControl={modalControl}\n                    toastOpen={toastOpen}\n                />\n            );\n        }\n    }\n\n    render()\n    {\n        const {\n            user,\n            tokenList,\n            account,\n            t,\n            actions,\n            mortgageRate,\n            equivalentAmount,\n            usable,\n            loan,\n            remaining,\n            usableXPA,\n            price,\n        } = this.props;\n        return (\n            <WithPopup\n                actions={this.props.actions}\n                loading={this.props.loading}\n                tokenList={this.props.tokenList}\n                keep={this.props.keep}\n                message={this.props.message}\n            >\n                {(modal, toastOpen) => (\n                    <div className=\"co_mortgage\">\n                        <Header />\n                        <nav>\n                            <span><Link to=\"/exchange\">{t('mortgage.index')}</Link></span>\n                            <img src=\"/img/icon/ic-breadthumb.svg\" alt=\"arrow\" />\n                            <span><Link to=\"/mortgage\">{t('mortgage.mortgage')}</Link></span>\n                            <img src=\"/img/icon/ic-breadthumb.svg\" alt=\"arrow\" />\n                            <span>{t('mortgage.offset')}</span>\n                        </nav>\n                        <main>\n                            <div>\n                                <div className=\"title\">{t('mortgage.wallet')}</div>\n                                {this.renderUser(modal, toastOpen)}\n                            </div>\n                            <div>\n                                <div className=\"title order\">\n                                    <span className=\"offset\">\n                                        {t('mortgage.offset')}\n                                        <Prompt message={t('prompt.offset')} />\n                                    </span>\n                                    <span><Link to=\"/mortgage\">{t('mortgage.mortgage')}</Link></span>\n                                </div>\n                                <OffsetOrder\n                                    user={user}\n                                    tokenList={tokenList}\n                                    token=\"XPA\"\n                                    cash=\"USX\"\n                                    account={account}\n                                    actions={actions}\n                                    mortgageRate={mortgageRate}\n                                    equivalentAmount={equivalentAmount}\n                                    usable={usable}\n                                    loan={loan}\n                                    remaining={remaining}\n                                    usableXPA={usableXPA}\n                                    price={price}\n                                    modalControl={modal}\n                                    toastOpen={toastOpen}\n                                />\n                            </div>\n                        </main>\n                        <Footer />\n                    </div>\n                )}\n            </WithPopup>\n        );\n    }\n}\n\nOffset.defaultProps = {\n    t: () => {},\n};\n\nOffset.propTypes = {\n    user: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n    tokenList: PropTypes.array.isRequired,\n    account: PropTypes.array.isRequired,\n    t: PropTypes.func,\n    loading: PropTypes.bool.isRequired,\n    message: PropTypes.string.isRequired,\n    keep: PropTypes.bool.isRequired,\n    mortgageRate: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    equivalentAmount: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    usable: PropTypes.object.isRequired,\n    loan: PropTypes.object.isRequired,\n    remaining: PropTypes.object.isRequired,\n    usableXPA: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    price: PropTypes.object.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(translate('account', { wait: true })(Offset));\n"],"sourceRoot":""}